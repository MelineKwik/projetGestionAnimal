<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'form.registry' shared service.

return $this->services['form.registry'] = new \Symfony\Component\Form\FormRegistry(array(0 => new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension(new \Symfony\Component\DependencyInjection\ServiceLocator(array('AppBundle\\Form\\AjoutAnimalType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\AjoutAnimalType']) ? $this->services['AppBundle\Form\AjoutAnimalType'] : $this->services['AppBundle\Form\AjoutAnimalType'] = new \AppBundle\Form\AjoutAnimalType()) && false ?: '_'};
}, 'AppBundle\\Form\\AjoutEvenementType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\AjoutEvenementType']) ? $this->services['AppBundle\Form\AjoutEvenementType'] : $this->services['AppBundle\Form\AjoutEvenementType'] = new \AppBundle\Form\AjoutEvenementType()) && false ?: '_'};
}, 'AppBundle\\Form\\AjoutMembreType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\AjoutMembreType']) ? $this->services['AppBundle\Form\AjoutMembreType'] : $this->services['AppBundle\Form\AjoutMembreType'] = new \AppBundle\Form\AjoutMembreType()) && false ?: '_'};
}, 'AppBundle\\Form\\Ek_AdminType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\Ek_AdminType']) ? $this->services['AppBundle\Form\Ek_AdminType'] : $this->services['AppBundle\Form\Ek_AdminType'] = new \AppBundle\Form\Ek_AdminType()) && false ?: '_'};
}, 'AppBundle\\Form\\Ek_AnimalType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\Ek_AnimalType']) ? $this->services['AppBundle\Form\Ek_AnimalType'] : $this->services['AppBundle\Form\Ek_AnimalType'] = new \AppBundle\Form\Ek_AnimalType()) && false ?: '_'};
}, 'AppBundle\\Form\\Ek_EspeceType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\Ek_EspeceType']) ? $this->services['AppBundle\Form\Ek_EspeceType'] : $this->services['AppBundle\Form\Ek_EspeceType'] = new \AppBundle\Form\Ek_EspeceType()) && false ?: '_'};
}, 'AppBundle\\Form\\Ek_FamilleType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\Ek_FamilleType']) ? $this->services['AppBundle\Form\Ek_FamilleType'] : $this->services['AppBundle\Form\Ek_FamilleType'] = new \AppBundle\Form\Ek_FamilleType()) && false ?: '_'};
}, 'AppBundle\\Form\\Ek_FormulaireType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\Ek_FormulaireType']) ? $this->services['AppBundle\Form\Ek_FormulaireType'] : $this->services['AppBundle\Form\Ek_FormulaireType'] = new \AppBundle\Form\Ek_FormulaireType()) && false ?: '_'};
}, 'AppBundle\\Form\\Ek_PersonneType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\Ek_PersonneType']) ? $this->services['AppBundle\Form\Ek_PersonneType'] : $this->services['AppBundle\Form\Ek_PersonneType'] = new \AppBundle\Form\Ek_PersonneType()) && false ?: '_'};
}, 'AppBundle\\Form\\Ek_TraitementType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\Ek_TraitementType']) ? $this->services['AppBundle\Form\Ek_TraitementType'] : $this->services['AppBundle\Form\Ek_TraitementType'] = new \AppBundle\Form\Ek_TraitementType()) && false ?: '_'};
}, 'AppBundle\\Form\\Ek_TransporteurType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\Ek_TransporteurType']) ? $this->services['AppBundle\Form\Ek_TransporteurType'] : $this->services['AppBundle\Form\Ek_TransporteurType'] = new \AppBundle\Form\Ek_TransporteurType()) && false ?: '_'};
}, 'AppBundle\\Form\\Ek_VaccinationType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\Ek_VaccinationType']) ? $this->services['AppBundle\Form\Ek_VaccinationType'] : $this->services['AppBundle\Form\Ek_VaccinationType'] = new \AppBundle\Form\Ek_VaccinationType()) && false ?: '_'};
}, 'AppBundle\\Form\\Ek_VeterinaireType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\Ek_VeterinaireType']) ? $this->services['AppBundle\Form\Ek_VeterinaireType'] : $this->services['AppBundle\Form\Ek_VeterinaireType'] = new \AppBundle\Form\Ek_VeterinaireType()) && false ?: '_'};
}, 'AppBundle\\Form\\Ek_VisiteType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\Ek_VisiteType']) ? $this->services['AppBundle\Form\Ek_VisiteType'] : $this->services['AppBundle\Form\Ek_VisiteType'] = new \AppBundle\Form\Ek_VisiteType()) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\ChangePasswordFormType' => function () {
    return ${($_ = isset($this->services['fos_user.change_password.form.type']) ? $this->services['fos_user.change_password.form.type'] : $this->services['fos_user.change_password.form.type'] = new \FOS\UserBundle\Form\Type\ChangePasswordFormType('AppBundle\\Entity\\Ek_Personne')) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\ProfileFormType' => function () {
    return ${($_ = isset($this->services['fos_user.profile.form.type']) ? $this->services['fos_user.profile.form.type'] : $this->services['fos_user.profile.form.type'] = new \FOS\UserBundle\Form\Type\ProfileFormType('AppBundle\\Entity\\Ek_Personne')) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\RegistrationFormType' => function () {
    return ${($_ = isset($this->services['fos_user.registration.form.type']) ? $this->services['fos_user.registration.form.type'] : $this->services['fos_user.registration.form.type'] = new \FOS\UserBundle\Form\Type\RegistrationFormType('AppBundle\\Entity\\Ek_Personne')) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\ResettingFormType' => function () {
    return ${($_ = isset($this->services['fos_user.resetting.form.type']) ? $this->services['fos_user.resetting.form.type'] : $this->services['fos_user.resetting.form.type'] = new \FOS\UserBundle\Form\Type\ResettingFormType('AppBundle\\Entity\\Ek_Personne')) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\UsernameFormType' => function () {
    return ${($_ = isset($this->services['fos_user.username_form_type']) ? $this->services['fos_user.username_form_type'] : $this->load('getFosUser_UsernameFormTypeService.php')) && false ?: '_'};
}, 'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => function () {
    return ${($_ = isset($this->services['form.type.entity']) ? $this->services['form.type.entity'] : $this->load('getForm_Type_EntityService.php')) && false ?: '_'};
}, 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => function () {
    return ${($_ = isset($this->services['form.type.choice']) ? $this->services['form.type.choice'] : $this->load('getForm_Type_ChoiceService.php')) && false ?: '_'};
}, 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => function () {
    return ${($_ = isset($this->services['form.type.form']) ? $this->services['form.type.form'] : $this->load('getForm_Type_FormService.php')) && false ?: '_'};
})), array('Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_extension.form.http_foundation']) ? $this->services['form.type_extension.form.http_foundation'] : $this->load('getForm_TypeExtension_Form_HttpFoundationService.php')) && false ?: '_'};
    yield 1 => ${($_ = isset($this->services['form.type_extension.form.validator']) ? $this->services['form.type_extension.form.validator'] : $this->load('getForm_TypeExtension_Form_ValidatorService.php')) && false ?: '_'};
    yield 2 => ${($_ = isset($this->services['form.type_extension.upload.validator']) ? $this->services['form.type_extension.upload.validator'] : $this->load('getForm_TypeExtension_Upload_ValidatorService.php')) && false ?: '_'};
    yield 3 => ${($_ = isset($this->services['form.type_extension.csrf']) ? $this->services['form.type_extension.csrf'] : $this->load('getForm_TypeExtension_CsrfService.php')) && false ?: '_'};
    yield 4 => ${($_ = isset($this->services['form.type_extension.form.data_collector']) ? $this->services['form.type_extension.form.data_collector'] : $this->load('getForm_TypeExtension_Form_DataCollectorService.php')) && false ?: '_'};
}, 5), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' => new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_extension.repeated.validator']) ? $this->services['form.type_extension.repeated.validator'] : $this->services['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension()) && false ?: '_'};
}, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' => new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_extension.submit.validator']) ? $this->services['form.type_extension.submit.validator'] : $this->services['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension()) && false ?: '_'};
}, 1)), new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_guesser.validator']) ? $this->services['form.type_guesser.validator'] : $this->load('getForm_TypeGuesser_ValidatorService.php')) && false ?: '_'};
    yield 1 => ${($_ = isset($this->services['form.type_guesser.doctrine']) ? $this->services['form.type_guesser.doctrine'] : $this->load('getForm_TypeGuesser_DoctrineService.php')) && false ?: '_'};
}, 2), NULL)), ${($_ = isset($this->services['form.resolved_type_factory']) ? $this->services['form.resolved_type_factory'] : $this->load('getForm_ResolvedTypeFactoryService.php')) && false ?: '_'});
